{
  "items": [
    {
      "creator": "Chris Coyier",
      "title": "Memorize Scroll Position Across Page Loads",
      "link": "https://css-tricks.com/memorize-scroll-position-across-page-loads/",
      "pubDate": "Thu, 09 Jul 2020 18:54:52 +0000",
      "content:encoded": "\n<p>Hakim El Hattab <a href=\"https://twitter.com/hakimel/status/1262337065670316033\">tweeted a really nice little UX enhancement</a> for a static site that includes a scrollable sidebar of navigation. </p>\n\n\n\n<span id=\"more-316417\"></span>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">👀 If you&#39;ve got a static site with a scrollable sidebar, it really helps to memorize the scroll position across page loads.<br><br>(left is default, right memorized) <a href=\"https://t.co/bLgtILP1JP\">pic.twitter.com/bLgtILP1JP</a></p>&mdash; Hakim El Hattab (@hakimel) <a href=\"https://twitter.com/hakimel/status/1262337065670316033?ref_src=twsrc%5Etfw\">May 18, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>The trick is to throw the scroll position into <code>localStorage</code> right before the page is exited, and when loaded, grab that value and scroll to it. I&#8217;ll retype it from the tweet&#8230;</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let sidebar = document.querySelector(\".sidebar\");\n\nlet top = localStorage.getItem(\"sidebar-scroll\");\nif (top !== null) {\n  sidebar.scrollTop = parseInt(top, 10);\n}\n\nwindow.addEventListener(\"beforeunload\", () => {\n  localStorage.setItem(\"sidebar-scroll\", sidebar.scrollTop);\n});</code></pre>\n\n\n\n<p>What is surprising is that you don&#8217;t get a flash-of-wrong-scroll-position. I wonder why? Maybe it has to do with fancy paint holding stuff browsers are doing now? Not sure. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/memorize-scroll-position-across-page-loads/\">Memorize Scroll Position Across Page Loads</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Chris Coyier",
      "comments": "https://css-tricks.com/memorize-scroll-position-across-page-loads/#respond",
      "content": "<p>Hakim El Hattab <a href=\"https://twitter.com/hakimel/status/1262337065670316033\">tweeted a really nice little UX enhancement</a> for a static site that includes a scrollable sidebar of navigation. </p>\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">👀 If you&#39;ve got a static site with a scrollable sidebar, it really helps to memorize the scroll position across page loads.</p>\n<p>(left is default, right memorized) <a href=\"https://t.co/bLgtILP1JP\">pic.twitter.com/bLgtILP1JP</a></p>\n<p>&#8212; Hakim El Hattab (@hakimel) <a href=\"https://twitter.com/hakimel/status/1262337065670316033?ref_src=twsrc%5Etfw\">May 18, 2020</a></p></blockquote>\n<p>The trick is to throw the scroll position into <code>localStorage</code> right before the page is exited, and when loaded, grab that value and &#8230; <a href=\"https://css-tricks.com/memorize-scroll-position-across-page-loads/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;Memorize Scroll Position Across Page Loads&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/memorize-scroll-position-across-page-loads/\">Memorize Scroll Position Across Page Loads</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "Hakim El Hattab tweeted a really nice little UX enhancement for a static site that includes a scrollable sidebar of navigation. \n\n👀 If you've got a static site with a scrollable sidebar, it really helps to memorize the scroll position across page loads.\n(left is default, right memorized) pic.twitter.com/bLgtILP1JP\n— Hakim El Hattab (@hakimel) May 18, 2020\nThe trick is to throw the scroll position into localStorage right before the page is exited, and when loaded, grab that value and … Read article  “Memorize Scroll Position Across Page Loads”\nThe post Memorize Scroll Position Across Page Loads appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316417",
      "categories": [
        "Article",
        "scrolling"
      ],
      "isoDate": "2020-07-09T18:54:52.000Z"
    },
    {
      "creator": "Pankaj Parashar",
      "title": "Building a Blog with Next.js",
      "link": "https://css-tricks.com/building-a-blog-with-next-js/",
      "pubDate": "Thu, 09 Jul 2020 14:52:06 +0000",
      "content:encoded": "\n<p>In this article, we will use <a href=\"https://nextjs.org/\">Next.js</a> to build a static blog framework with the design and structure inspired by <a href=\"https://jekyllrb.com/\">Jekyll</a>. I&#8217;ve always been a big fan of how Jekyll makes it easier for beginners to setup a blog and at the same time also provides a great degree of control over every aspect of the blog for the advanced users.</p>\n\n\n\n<p>With the introduction of Next.js in recent years, combined with the popularity of React, there is a new avenue to explore for static blogs. Next.js makes it super easy to build static websites based on the file system itself with little to no configuration required.</p>\n\n\n\n<span id=\"more-316504\"></span>\n\n\n\n<p>The directory structure of a typical bare-bones Jekyll blog looks like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">.\n├─── _posts/          ...blog posts in markdown\n├─── _layouts/        ...layouts for different pages\n├─── _includes/       ...re-usable components\n├─── index.md         ...homepage\n└─── config.yml       ...blog config</code></pre>\n\n\n\n<p>The idea is to design our framework around this directory structure as much as possible so that it becomes easier to &nbsp;migrate a blog from Jekyll by simply reusing the posts and configs defined in the blog.</p>\n\n\n\n<p class=\"explanation\">For those unfamiliar with Jekyll, it is a static site generator that can transform your plain text into static websites and blogs. Refer the <a href=\"https://jekyllrb.com/docs/\">quick start guide</a> to get up and running with Jekyll.<br><br>This article also assumes that you have a basic knowledge of React. If not, React’s&nbsp;<a href=\"https://reactjs.org/docs/getting-started.html\">getting started</a>&nbsp;page is a good place to start.</p>\n\n\n\n<h3>Installation</h3>\n\n\n\n<p>Next.js is powered by <a href=\"https://reactjs.org/\">React</a> and written in <a href=\"https://nodejs.org/en/\">Node.js</a>. So we need to install <a href=\"https://www.npmjs.com/\">npm</a> first, before adding <code>next</code>, <code>react</code> and <code>react-dom</code> to the project.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">mkdir nextjs-blog &amp;&amp; cd $_\nnpm init -y\nnpm install next react react-dom --save</code></pre>\n\n\n\n<p>To run Next.js scripts on the command line, we have to add the <code>next</code> command to the <code>scripts</code> section of our <code>package.json</code>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">\"scripts\": {\n  \"dev\": \"next\"\n}</code></pre>\n\n\n\n<p>We can now run <code>npm run dev</code> on the command line for the first time. Let&#8217;s see what happens.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">$ npm run dev\n> nextjs-blog@1.0.0 dev /~user/nextjs-blog\n> next\n\nready - started server on http://localhost:3000\nError: > Couldn't find a `pages` directory. Please create one under the project root</code></pre>\n\n\n\n<p>The compiler is complaining about a missing pages directory in the root of the project. We’ll learn about the concept of pages in the next section.</p>\n\n\n\n<h3>Concept of pages</h3>\n\n\n\n<p>Next.js is built around the concept of pages. Each page is a React component that can be of type <code>.js</code> or <code>.jsx</code> which is mapped to a route based on the filename. For example:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">File                            Route\n----                            -----\n/pages/about.js                 /about\n/pages/projects/work1.js        /projects/work1\n/pages/index.js                 /</code></pre>\n\n\n\n<p>Let’s create the <code>pages</code> directory in the root of the project and populate our first page, <code>index.js</code>, with a basic React component.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// pages/index.js\nexport default function Blog() {\n  return &lt;div>Welcome to the Next.js blog&lt;/div>\n}</code></pre>\n\n\n\n<p>Run <code>npm run dev</code> once again to start the server and navigate to <code>http://localhost:3000</code> in the browser to view your blog for the first time.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://css-tricks.com/wp-content/uploads/2020/07/r2LmPyTM.png\" alt=\"Screenshot of the homepage in the browser. The content says welcome to the next.js blog.\" class=\"wp-image-316508\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/r2LmPyTM.png 1390w, https://css-tricks.com/wp-content/uploads/2020/07/r2LmPyTM-300x176.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/r2LmPyTM-1024x601.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/r2LmPyTM-768x451.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/r2LmPyTM-1000x587.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<p>Out of the box, we get:</p>\n\n\n\n<ul><li>Hot reloading so we don&#8217;t have to refresh the browser for every code change.</li><li>Static generation of all pages inside the <code>/pages/**</code> directory.</li><li>Static file serving for assets living in the<code>/public/**</code> directory.</li><li>404 error page.</li></ul>\n\n\n\n<p>Navigate to a random path on localhost to see the 404 page in action. If you need a custom 404 page, the <a href=\"https://nextjs.org/docs/advanced-features/custom-error-page#404-page\">Next.js docs have great information</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/07/4Ee3BuaM.png?fit=1024%2C645&amp;ssl=1\" alt=\"Screenshot of the 404 page. It says 404 This page could not be found.\" class=\"wp-image-316509\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/4Ee3BuaM.png 1282w, https://css-tricks.com/wp-content/uploads/2020/07/4Ee3BuaM-300x189.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/4Ee3BuaM-1024x645.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/4Ee3BuaM-768x483.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/4Ee3BuaM-1000x629.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<h3>Dynamic pages</h3>\n\n\n\n<p>Pages with static routes are useful to build the homepage, about page, etc. However, to dynamically build all our posts, we will use the <a href=\"https://nextjs.org/docs/routing/dynamic-routes\">dynamic route</a> capability of Next.js. For example:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">File                        Route\n----                        -----\n/pages/posts/[slug].js      /posts/1\n                            /posts/abc\n                            /posts/hello-world</code></pre>\n\n\n\n<p>Any route, like <code>/posts/1</code>, <code>/posts/abc</code>, etc., will be matched by <code>/posts/[slug].js</code> and the slug parameter will be sent as a query parameter to the page. This is especially useful for our blog posts because we don&#8217;t want to create one file per post; instead we could dynamically pass the slug to render the corresponding post.</p>\n\n\n\n<h3>Anatomy of a blog</h3>\n\n\n\n<p>Now, since we understand the basic building blocks of Next.js, let&#8217;s define the anatomy of our blog.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">.\n├─ api\n│  └─ index.js             # fetch posts, load configs, parse .md files etc\n├─ _includes\n│  ├─ footer.js            # footer component\n│  └─ header.js            # header component\n├─ _layouts\n│  ├─ default.js           # default layout for static pages like index, about\n│  └─ post.js              # post layout inherts from the default layout\n├─ pages\n│  ├─ index.js             # homepage\n|  └─ posts                # posts will be available on the route /posts/\n|     └─ [slug].js       # dynamic page to build posts\n└─ _posts\n   ├─ welcome-to-nextjs.md\n   └─ style-guide-101.md</code></pre>\n\n\n\n<h3>Blog API</h3>\n\n\n\n<p>A basic blog framework needs two API functions:&nbsp;</p>\n\n\n\n<ul><li>A function to fetch the metadata of all the posts in <code>_posts</code> directory</li><li>A function to fetch a single post for a given <code>slug</code> with the complete HTML and metadata</li></ul>\n\n\n\n<p>Optionally, we would also like all the site&#8217;s configuration defined in <code>config.yml</code> to be available across all the components. So we need a function that will parse the YAML config into a native object.</p>\n\n\n\n<p>Since, we would be dealing with a lot of non-JavaScript files, like Markdown (<code>.md</code>), YAML (<code>.yml</code>), etc, we&#8217;ll use the <code>raw-loader</code> library to load such files as strings to make it easier to process them.&nbsp;</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm install raw-loader --save-dev</code></pre>\n\n\n\n<p>Next we need to tell Next.js to use raw-loader when we import .md and .yml file formats by creating a <code>next.config.js</code> file in the root of the project (<a href=\"https://nextjs.org/docs/api-reference/next.config.js/introduction\">more info</a> on that).</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">module.exports = {\n  target: 'serverless',\n  webpack: function (config) {\n    config.module.rules.push({test:  /\\.md$/, use: 'raw-loader'})\n    config.module.rules.push({test: /\\.yml$/, use: 'raw-loader'})\n    return config\n  }\n}</code></pre>\n\n\n\n<p>Next.js 9.4 <a href=\"https://nextjs.org/blog/next-9-4%23absolute-imports-and-aliases\">introduced</a> aliases for relative imports which helps clean up the import statement spaghetti caused by relative paths. To use aliases, create a <code>jsconfig.json</code> file in the project’s root directory specifying the base path and all the module aliases needed for the project.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@includes/*\": [\"_includes/*\"],\n      \"@layouts/*\": [\"_layouts/*\"],\n      \"@posts/*\": [\"_posts/*\"],\n      \"@api\": [\"api/index\"],\n    }\n  }\n}</code></pre>\n\n\n\n<p>For example, this allows us to import our layouts by just using:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import DefaultLayout from '@layouts/default'</code></pre>\n\n\n\n<h4>Fetch all the posts</h4>\n\n\n\n<p>This function will read all the Markdown files in the <code>_posts</code> directory, parse the front matter defined at the beginning of the post using gray-matter and return the array of metadata for all the posts.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// api/index.js\nimport matter from 'gray-matter'\n \nexport async function getAllPosts() {\n  const context = require.context('../_posts', false, /\\.md$/)\n  const posts = []\n  for(const key of context.keys()){\n    const post = key.slice(2);\n    const content = await import(`../_posts/${post}`);\n    const meta = matter(content.default)\n    posts.push({\n      slug: post.replace('.md',''),\n      title: meta.data.title\n    })\n  }\n  return posts;\n}</code></pre>\n\n\n\n<p>A typical Markdown post looks like this:</p>\n\n\n\n<pre rel=\"Markdown\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">---\ntitle:  \"Welcome to Next.js blog!\"\n---\n**Hello world**, this is my first Next.js blog post and it is written in Markdown.\nI hope you like it!</code></pre>\n\n\n\n<p>The section outlined by <code>---</code> is called the front matter which holds the metadata of the post like, title, permalink, tags, etc. Here&#8217;s the output:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">[\n  { slug: 'style-guide-101', title: 'Style Guide 101' },\n  { slug: 'welcome-to-nextjs', title: 'Welcome to Next.js blog!' }\n]</code></pre>\n\n\n\n<p class=\"explanation\">Make sure you install the gray-matter library from npm first using the command <code>npm install gray-matter --save-dev</code>.</p>\n\n\n\n<h4>Fetch a single post</h4>\n\n\n\n<p>For a given slug, this function will locate the file in the <code>_posts</code> directory, parse the Markdown with the marked library and return the output HTML with metadata.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// api/index.js\nimport matter from 'gray-matter'\nimport marked from 'marked'\n \nexport async function getPostBySlug(slug) {\n  const fileContent = await import(`../_posts/${slug}.md`)\n  const meta = matter(fileContent.default)\n  const content = marked(meta.content)    \n  return {\n    title: meta.data.title, \n    content: content\n  }\n}</code></pre>\n\n\n\n<p>Sample output:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  title: 'Style Guide 101',\n  content: '&lt;p>Incididunt cupidatat eiusmod ...&lt;/p>'\n}</code></pre>\n\n\n\n<p class=\"explanation\">Make sure you install the marked library from npm first using the command <code>npm install marked --save-dev</code>.</p>\n\n\n\n<h4>Config</h4>\n\n\n\n<p>In order to re-use the Jekyll config for our Next.js blog, we&#8217;ll parse the YAML file using the <code>js-yaml</code> library and export this config so that it can be used across components.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// config.yml\ntitle: \"Next.js blog\"\ndescription: \"This blog is powered by Next.js\"\n \n// api/index.js\nimport yaml from 'js-yaml'\nexport async function getConfig() {\n  const config = await import(`../config.yml`)\n  return yaml.safeLoad(config.default)\n}</code></pre>\n\n\n\n<p class=\"explanation\">Make sure you install <code>js-yaml</code> from npm first using the command <code>npm install js-yaml --save-dev</code>.</p>\n\n\n\n<h3>Includes</h3>\n\n\n\n<p>Our <code>_includes</code> directory contains two basic React components, <code>&lt;Header&gt;</code> and <code>&lt;Footer&gt;</code>, which will be used in the different layout components defined in the <code>_layouts</code> directory.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// _includes/header.js\nexport default function Header() {\n  return &lt;header>&lt;p>Blog | Powered by Next.js&lt;/p>&lt;/header>\n}\n \n// _includes/footer.js\nexport default function Footer() {\n  return &lt;footer>&lt;p>&copy;2020 | Footer&lt;/p>&lt;/footer>\n}</code></pre>\n\n\n\n<h3>Layouts</h3>\n\n\n\n<p>We have two layout components in the <code>_layouts</code> directory. One is the <code>&lt;DefaultLayout</code>&gt; which is the base layout on top of which every other layout component will be built.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// _layouts/default.js\nimport Head from 'next/head'\nimport Header from '@includes/header'\nimport Footer from '@includes/footer'\n \nexport default function DefaultLayout(props) {\n  return (\n    &lt;main>\n      &lt;Head>\n        &lt;title>{props.title}&lt;/title>\n        &lt;meta name='description' content={props.description}/>\n      &lt;/Head>\n      &lt;Header/>\n      {props.children}\n      &lt;Footer/>\n    &lt;/main>\n  )\n}</code></pre>\n\n\n\n<p>The second layout is the <code>&lt;PostLayout&gt;</code> component that will override the title defined in the <code>&lt;DefaultLayout&gt;</code> with the post title and render the HTML of the post. It also includes a link back to the homepage.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// _layouts/post.js\nimport DefaultLayout from '@layouts/default'\nimport Head from 'next/head'\nimport Link from 'next/link'\n \nexport default function PostLayout(props) {\n  return (\n    &lt;DefaultLayout>\n      &lt;Head>\n        &lt;title>{props.title}&lt;/title>\n      &lt;/Head>\n      &lt;article>\n        &lt;h1>{props.title}&lt;/h1>\n        &lt;div dangerouslySetInnerHTML={{__html:props.content}}/>\n        &lt;div>&lt;Link href='/'>&lt;a>Home&lt;/a>&lt;/Link>&lt;/div> \n      &lt;/article>\n    &lt;/DefaultLayout>\n  )\n}</code></pre>\n\n\n\n<p class=\"explanation\"><code><a href=\"https://nextjs.org/docs/api-reference/next/head\">next/head</a></code> is a built-in component to append elements to the <code>&lt;head&gt;</code> of the page. <code><a href=\"https://nextjs.org/docs/api-reference/next/head\">next/link</a></code> is a built-in component that handles client-side transitions between the routes defined in the pages directory.</p>\n\n\n\n<h3>Homepage</h3>\n\n\n\n<p>As part of the index page, aka homepage, we will list all the posts inside the <code>_posts</code> directory. The list will contain the post title and the permalink to the individual post page. The index page will use the <code>&lt;DefaultLayout&gt;</code> and we&#8217;ll import the config in the homepage to pass the <code>title</code> and <code>description</code> to the layout.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// pages/index.js\nimport DefaultLayout from '@layouts/default'\nimport Link from 'next/link'\nimport { getConfig, getAllPosts } from '@api'\n \nexport default function Blog(props) {\n  return (\n    &lt;DefaultLayout title={props.title} description={props.description}>\n      &lt;p>List of posts:&lt;/p>\n      &lt;ul>\n        {props.posts.map(function(post, idx) {\n          return (\n            &lt;li key={idx}>\n              &lt;Link href={'/posts/'+post.slug}>\n                &lt;a>{post.title}&lt;/a>\n              &lt;/Link>\n            &lt;/li>\n          )\n        })}\n      &lt;/ul>\n    &lt;/DefaultLayout>\n  )\n} \n \nexport async function getStaticProps() {\n  const config = await getConfig()\n  const allPosts = await getAllPosts()\n  return {\n    props: {\n      posts: allPosts,\n      title: config.title,\n      description: config.description\n    }\n  }\n}</code></pre>\n\n\n\n<p class=\"explanation\"><code>getStaticProps</code> is called at the build time to pre-render pages by passing <code>props</code> to the default component of the page. We use this function to fetch the list of all posts at build time and render the posts archive on the homepage.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://css-tricks.com/wp-content/uploads/2020/07/KJidSMgw.png\" alt=\"Screenshot of the homepage showing the page title, a list with two post titles, and the footer.\" class=\"wp-image-316512\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/KJidSMgw.png 1544w, https://css-tricks.com/wp-content/uploads/2020/07/KJidSMgw-300x176.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/KJidSMgw-1024x600.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/KJidSMgw-768x450.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/KJidSMgw-1536x899.png 1536w, https://css-tricks.com/wp-content/uploads/2020/07/KJidSMgw-1000x585.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<h3>Post page</h3>\n\n\n\n<p>This page will render the title and contents of the post for the <code>slug</code> supplied as part of the <code>context</code>. The post page will use the <code>&lt;PostLayout&gt;</code> component.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// pages/posts/[slug].js\nimport PostLayout from '@layouts/post'\nimport { getPostBySlug, getAllPosts } from \"@api\"\n \nexport default function Post(props) {\n  return &lt;PostLayout title={props.title} content={props.content}/>\n}\n \nexport async function getStaticProps(context) {\n  return {\n    props: await getPostBySlug(context.params.slug)\n  }\n}\n \nexport async function getStaticPaths() {\n  let paths = await getAllPosts()\n  paths = paths.map(post => ({\n    params: { slug:post.slug }\n  }));\n  return {\n    paths: paths,\n    fallback: false\n  }\n}</code></pre>\n\n\n\n<p class=\"explanation\">If a page has dynamic routes, Next.js needs to know all the possible paths at build time. <code><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\">getStaticPaths</a></code> supplies the list of paths that has to be rendered to HTML at build time. The fallback property ensures that if you visit a route that does not exist in the list of paths, it will return a 404 page.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://css-tricks.com/wp-content/uploads/2020/07/AXQYtDL4.png\" alt=\"Screenshot of the blog page showing a welcome header and a hello world blue above the footer.\" class=\"wp-image-316513\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/AXQYtDL4.png 1542w, https://css-tricks.com/wp-content/uploads/2020/07/AXQYtDL4-300x177.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/AXQYtDL4-1024x603.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/AXQYtDL4-768x452.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/AXQYtDL4-1536x904.png 1536w, https://css-tricks.com/wp-content/uploads/2020/07/AXQYtDL4-1000x589.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<h3>Production ready</h3>\n\n\n\n<p>Add the following commands for <code>build</code> and <code>start</code> in <code>package.json</code>, under the <code>scripts</code> section and then run <code>npm run build</code> followed by <code>npm run start</code> to build the static blog and start the production server.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// package.json\n\"scripts\": {\n  \"dev\": \"next\",\n  \"build\": \"next build\",\n  \"start\": \"next start\"\n}</code></pre>\n\n\n\n<p>The entire source code in this article is available on <a href=\"https://github.com/pankajparashar/hyde\">this GitHub repositor</a>y. Feel free to clone it locally and play around with it. The repository also includes some basic placeholders to apply CSS to your blog.</p>\n\n\n\n<h3>Improvements</h3>\n\n\n\n<p>The blog, although functional, is perhaps too basic for most average cases. It would be nice to extend the framework or <a href=\"https://github.com/pankajparashar/hyde\">submit a patch</a> to include some more features like:</p>\n\n\n\n<ul><li>Pagination</li><li>Syntax highlighting</li><li>Categories and Tags for posts</li><li>Styling</li></ul>\n\n\n\n<p>Overall, Next.js seems really very promising to build static websites, like a blog. Combined with its ability to <a href=\"https://nextjs.org/docs/advanced-features/static-html-export\">export static HTML</a>, we can built a truly standalone app without the need of a server!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/building-a-blog-with-next-js/\">Building a Blog with Next.js</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Pankaj Parashar",
      "comments": "https://css-tricks.com/building-a-blog-with-next-js/#respond",
      "content": "<p>In this article, we will use <a href=\"https://nextjs.org/\">Next.js</a> to build a static blog framework with the design and structure inspired by <a href=\"https://jekyllrb.com/\">Jekyll</a>. I&#8217;ve always been a big fan of how Jekyll makes it easier for beginners to setup a blog and at the same time also provides a great degree of control over every aspect of the blog for the advanced users.</p>\n<p>With the introduction of Next.js in recent years, combined with the popularity of React, there is a new &#8230; <a href=\"https://css-tricks.com/building-a-blog-with-next-js/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;Building a Blog with Next.js&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/building-a-blog-with-next-js/\">Building a Blog with Next.js</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "In this article, we will use Next.js to build a static blog framework with the design and structure inspired by Jekyll. I’ve always been a big fan of how Jekyll makes it easier for beginners to setup a blog and at the same time also provides a great degree of control over every aspect of the blog for the advanced users.\nWith the introduction of Next.js in recent years, combined with the popularity of React, there is a new … Read article  “Building a Blog with Next.js”\nThe post Building a Blog with Next.js appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316504",
      "categories": [
        "Article",
        "next.js"
      ],
      "isoDate": "2020-07-09T14:52:06.000Z"
    },
    {
      "creator": "Chris Coyier",
      "title": "Frontity is React for WordPress",
      "link": "https://css-tricks.com/frontity-is-react-for-wordpress/",
      "pubDate": "Thu, 09 Jul 2020 14:50:54 +0000",
      "content:encoded": "\n<p>Some developers just prefer working in React. I don&#8217;t blame them really, because I like React too. Maybe that&#8217;s what they learned first. I&#8217;ve been using it long enough there is just some comfort to it. But mostly it is the strong component model that I like. There is just something nice about a codebase where things are constructed from components with clear jobs and responsibilities. </p>\n\n\n\n<p>It&#8217;s not terribly common to see WordPress sites built with React though. The standard way to use WordPress is through themes that are essentially styles and PHP files that handle the templating. <a href=\"https://frontity.org/\">Frontity</a> is changing that though. Frontity is a React-powered framework that digests your WordPress site&#8217;s API and builds the entire front end in React with all the powerful tools you&#8217;ve come to expect from that type of environment.</p>\n\n\n\n<span id=\"more-316375\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.23.27-PM-1.png?fit=1024%2C618&amp;ssl=1\" alt=\"\" class=\"wp-image-316579\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.23.27-PM-1.png 2702w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.23.27-PM-1-300x181.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.23.27-PM-1-1024x618.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.23.27-PM-1-768x464.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.23.27-PM-1-1536x928.png 1536w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.23.27-PM-1-2048x1237.png 2048w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.23.27-PM-1-1000x604.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<h3>OMG, Now That&#8217;s a Fast Setup</h3>\n\n\n\n<p>This is how I was able to get started. At the command line, I did:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npx frontity create my-app</code></pre>\n\n\n\n<p>Then I went into the folder it created and did:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npx frontity dev</code></pre>\n\n\n\n<p>That instantly spins up a site for you to start working with.</p>\n\n\n\n<p>To make it feel more real for me, I did went into <code>frontity.settings.js</code> and changed the source API to point at CSS-Tricks:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  name: \"@frontity/wp-source\",\n  state: {\n    source: {\n      api: \"https://css-tricks.com/wp-json\",\n    },\n  },\n},</code></pre>\n\n\n\n<p>And now look at what I get:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.50.55-PM.png?fit=1024%2C785&amp;ssl=1\" alt=\"\" class=\"wp-image-316568\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.50.55-PM.png 2180w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.50.55-PM-300x230.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.50.55-PM-1024x785.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.50.55-PM-768x589.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.50.55-PM-1536x1178.png 1536w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.50.55-PM-2048x1571.png 2048w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.50.55-PM-1000x767.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<p>That&#8217;s <em>wild</em>. For some projects, that&#8217;s straight up ready to deploy.</p>\n\n\n\n<h3>Check out their intro video which steps through this exact thing</h3>\n\n\n\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"Getting Started with Frontity\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/OdiuVxjbh9A?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<h3>Getting to Work</h3>\n\n\n\n<p>My first instinct with things like this is to get my hands into the styling right away. The theme that installs by default is the <a href=\"https://github.com/frontity/frontity/tree/dev/packages/mars-theme\">Mars theme</a> and they have <a href=\"https://docs.frontity.org/guides/understanding-mars-theme-1\">a nice guide</a> to help wrap your mind around how it works. The theme uses <a href=\"https://emotion.sh/docs/introduction\">Emotion</a> for styling, so the components have styles you can mess with right in them. I found the <code>&lt;HeadContainer&gt;</code> component in <code>index.js</code> and immediately did the <code>background: red</code> change!</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const HeadContainer = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  background-color: red;\n`;</code></pre>\n\n\n\n<p>It hot-module-reloaded that sucker instantly:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.05.53-PM.png?fit=1024%2C811&amp;ssl=1\" alt=\"\" class=\"wp-image-316572\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.05.53-PM.png 1714w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.05.53-PM-300x238.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.05.53-PM-1024x811.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.05.53-PM-768x608.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.05.53-PM-1536x1217.png 1536w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-4.05.53-PM-1000x792.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<h3>Is this one of those client-side only technologies?</h3>\n\n\n\n<p>That&#8217;s what I thought to myself. I mean, one of the advantages of using WordPress as-is is that you get the server rendering for free. That means no SEO worries (we know client-side rendered sites can take a week or more to be crawled for every change). That means resiliency and speed. </p>\n\n\n\n<p>Frontity <em>does</em> do server side rendering! It uses Isomorphic rendering, meaning you need a Node server to render the pages, but that means the browser will get fully formed HTML for pages! </p>\n\n\n\n<p>It&#8217;s <a href=\"https://docs.frontity.org/deployment/deploy-using-now-vercel\">a perfect match</a> for <a href=\"https://vercel.com/\">Vercel</a>, basically. </p>\n\n\n\n<p>Similarly to how easy a new site is to scaffold and run in development, all you have to do to prep it for production is:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npx frontity build</code></pre>\n\n\n\n<p>Then run the Node server:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npx frontity serve</code></pre>\n\n\n\n<p>Cool.</p>\n\n\n\n<p>I also really like that there is <a href=\"https://community.frontity.org/\">community</a> around all this. If you need help, you&#8217;ll get it. </p>\n\n\n\n<h3>This is a best-of-all-worlds scenario.</h3>\n\n\n\n<p>I&#8217;m always very happy building sites with WordPress, and doubly so now that we have the block editor to use. I really like having an editor experience that helps me write and craft the kind of pages I want to create.</p>\n\n\n\n<p>But I <em>also</em> like working with component-based architectures that have fast, easy-to-use, hot refreshing local development environments. Once you work in this kind of dev environment, it&#8217;s hard to use anything else! Beautiful <a href=\"https://css-tricks.com/what-is-developer-experience-dx/\">DX</a>.</p>\n\n\n\n<p>And I <em>also also</em> want to make damn sure the sites I deploy to production are fast, robust, resilient, accessible, and SEO friendly. </p>\n\n\n\n<p>I&#8217;d get <em>all that</em> with a Frontity site. </p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Another thing I like here is that Automattic themselves is on board with all this. Not just in spirit, but they are <a href=\"https://frontity.org/blog/announcing-frontitys-e1m-funding-round-with-automattic-and-k-fund/\">literally big investors</a>. I think they are very smart to see this as an important part of the WordPress ecosystem. Building with WordPress doesn&#8217;t mean <em>not</em> building with React, especially with Frontity doing so much of the heavy lifting. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/frontity-is-react-for-wordpress/\">Frontity is React for WordPress</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Chris Coyier",
      "comments": "https://css-tricks.com/frontity-is-react-for-wordpress/#respond",
      "content": "<p>Some developers just prefer working in React. I don&#8217;t blame them really, because I like React too. Maybe that&#8217;s what they learned first. I&#8217;ve been using it long enough there is just some comfort to it. But mostly it is the strong component model that I like. There is just something nice about a codebase where things are constructed from components with clear jobs and responsibilities. </p>\n<p>It&#8217;s not terribly common to see WordPress sites built with React though. The standard &#8230; <a href=\"https://css-tricks.com/frontity-is-react-for-wordpress/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;Frontity is React for WordPress&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/frontity-is-react-for-wordpress/\">Frontity is React for WordPress</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "Some developers just prefer working in React. I don’t blame them really, because I like React too. Maybe that’s what they learned first. I’ve been using it long enough there is just some comfort to it. But mostly it is the strong component model that I like. There is just something nice about a codebase where things are constructed from components with clear jobs and responsibilities. \nIt’s not terribly common to see WordPress sites built with React though. The standard … Read article  “Frontity is React for WordPress”\nThe post Frontity is React for WordPress appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316375",
      "categories": [
        "Article",
        "Sponsored"
      ],
      "isoDate": "2020-07-09T14:50:54.000Z"
    },
    {
      "creator": "Chris Coyier",
      "title": "A little bit of plain Javascript can do a lot",
      "link": "https://jvns.ca/blog/2020/06/19/a-little-bit-of-plain-javascript-can-do-a-lot/",
      "pubDate": "Wed, 08 Jul 2020 21:29:52 +0000",
      "content:encoded": "\n<p><a href=\"https://jvns.ca/blog/2020/06/19/a-little-bit-of-plain-javascript-can-do-a-lot/\">Julia Evans</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I decided to implement almost all of the UI by just adding &amp; removing CSS classes, and using&nbsp;<a href=\"https://3dtransforms.desandro.com/card-flip\">CSS transitions</a>&nbsp;if I want to animate a transition.</p></blockquote>\n\n\n\n<p>An awful lot of the JavaScript on sites (that aren&#8217;t otherwise entirely constructed from JavaScript) is <em>click the thing, toggle the class</em> — which is why jQuery was so good and libraries like <a href=\"https://github.com/alpinejs/alpine\">Alpine.js</a> are finding happy developer audiences.  </p>\n\n\n\n<p>I once did a screencast called <a href=\"https://css-tricks.com/video-screencasts/150-hey-designers-know-one-thing-javascript-recommend/\"><strong>&#8220;Hey designers, if you only know one thing about JavaScript, this is what I would recommend</strong>&#8220;</a> which was basically: learn to toggle classes. From that:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Sometimes, to start a journey into learning something huge and complex, you need to learn something small and simple. JavaScript is huge and complex, but you can baby step into it by learning small and simple things. If you’re a web designer, I think there is one thing in particular that you can learn that is extremely empowering.</p><p><strong>This is the thing I want you to learn:</strong>&nbsp;When you click on some element, change a class on some element.</p></blockquote>\n\n\n\n<p></p>\n<p><a href=\"https://jvns.ca/blog/2020/06/19/a-little-bit-of-plain-javascript-can-do-a-lot/\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/a-little-bit-of-plain-javascript-can-do-a-lot/\">Permalink</a></p><p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/a-little-bit-of-plain-javascript-can-do-a-lot/\">A little bit of plain Javascript can do a lot</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Chris Coyier",
      "comments": "https://css-tricks.com/a-little-bit-of-plain-javascript-can-do-a-lot/#comments",
      "content": "<p><a href=\"https://jvns.ca/blog/2020/06/19/a-little-bit-of-plain-javascript-can-do-a-lot/\">Julia Evans</a>:</p>\n<blockquote class=\"wp-block-quote\">\n<p>I decided to implement almost all of the UI by just adding &#38; removing CSS classes, and using&#160;<a href=\"https://3dtransforms.desandro.com/card-flip\">CSS transitions</a>&#160;if I want to animate a transition.</p>\n</blockquote>\n<p>An awful lot of the JavaScript on sites (that aren&#8217;t otherwise entirely constructed from JavaScript) is <em>click the thing, toggle the class</em> — which is why jQuery was so good and libraries like <a href=\"https://github.com/alpinejs/alpine\">Alpine.js</a> are finding happy developer audiences.  </p>\n<p>I once did a screencast called <a href=\"https://css-tricks.com/video-screencasts/150-hey-designers-know-one-thing-javascript-recommend/\"><strong>&#8220;Hey designers, if you only </strong></a>&#8230; <a href=\"https://css-tricks.com/a-little-bit-of-plain-javascript-can-do-a-lot/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;A little bit of plain Javascript can do a lot&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/a-little-bit-of-plain-javascript-can-do-a-lot/\">A little bit of plain Javascript can do a lot</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "Julia Evans:\n\nI decided to implement almost all of the UI by just adding & removing CSS classes, and using CSS transitions if I want to animate a transition.\n\nAn awful lot of the JavaScript on sites (that aren’t otherwise entirely constructed from JavaScript) is click the thing, toggle the class — which is why jQuery was so good and libraries like Alpine.js are finding happy developer audiences.  \nI once did a screencast called “Hey designers, if you only … Read article  “A little bit of plain Javascript can do a lot”\nThe post A little bit of plain Javascript can do a lot appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316412",
      "categories": [
        "Link",
        "learning"
      ],
      "isoDate": "2020-07-08T21:29:52.000Z"
    },
    {
      "creator": "Robin Rendle",
      "title": "How to Make a List Component with Emotion",
      "link": "https://css-tricks.com/how-to-make-a-list-component-with-emotion/",
      "pubDate": "Wed, 08 Jul 2020 14:46:38 +0000",
      "content:encoded": "\n<p>I’ve been doing a bit of refactoring this week at <a href=\"https://sentry.io/welcome/\">Sentry</a> and I noticed that we didn’t have a generic List component that we could use across projects and features. So, I started one, but here’s the rub: we style things at Sentry using <a href=\"https://emotion.sh/docs/introduction\">Emotion</a>, which I have only passing experience with and is described in the docs as…</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[…] a library designed for writing css styles with JavaScript. It provides powerful and predictable style composition in addition to a great developer experience with features such as source maps, labels, and testing utilities. Both string and object styles are supported.</p></blockquote>\n\n\n\n<p>If you’ve never heard of Emotion, the general idea is this: when we’re working on big codebases with lots of components, we want to ensure that we can control the cascade of our CSS. So, let’s say you have an <code>.active</code> class in one file and you want to make sure that doesn’t impact the styles of a completely separate component in another file that also has a class of<code>.active</code>.</p>\n\n\n\n<span id=\"more-316298\"></span>\n\n\n\n<p>Emotion tackles this problem by adding custom strings to your classnames so they don’t conflict with other components. Here’s an example of the HTML it might output:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"css-1tfy8g7-List e13k4qzl9\">&lt;/div></code></pre>\n\n\n\n<p>Pretty neat, huh? There’s lots of other tools and workflows out there though that do something very similar, such as <a href=\"https://css-tricks.com/css-modules-part-1-need/\">CSS Modules</a>.</p>\n\n\n\n<p>To get started making the component, we first need to <a href=\"https://emotion.sh/docs/install\">install Emotion</a> into our project. I’m not going to walkthrough that stuff because it’s going to be different depending on your environment and setup. But once that’s complete we can go ahead and create a new component like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React from 'react';\nimport styled from '@emotion/styled';\n\nexport const List = styled('ul')`\n  list-style: none;\n  padding: 0;\n`;</code></pre>\n\n\n\n<p>This looks pretty weird to me because, not only are we writing styles for the <code>&lt;ul&gt;</code> element, but we’re defining that the component should render a <code>&lt;ul&gt;</code>, too. Combining both the markup and the styles in one place feels odd but I do like how simple it is. It just sort of messes with my mental model and the separation of concerns between HTML, CSS, and JavaScript.</p>\n\n\n\n<p>In another component, we can import this <code>&lt;List&gt;</code> and use it like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import List from 'components/list';\n\n&lt;List>This is a list item.&lt;/List></code></pre>\n\n\n\n<p>The styles we added to our list component will then be turned into a classname, like <code>.oefioaueg</code>, and then added to the <code>&lt;ul&gt;</code> element we defined in the component.</p>\n\n\n\n<p>But we’re not done yet! With the list design, I needed to be able to render a <code>&lt;ul&gt;</code> and an <code>&lt;ol&gt;</code> with the same component. I also needed a version that allows me to place an icon within each list item. Just like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://css-tricks.com/wp-content/uploads/2020/07/85650426-61a90480-b65a-11ea-942d-6b0da83fc4fe.png\" alt=\"\" class=\"wp-image-316299\" width=\"379\" height=\"322\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/85650426-61a90480-b65a-11ea-942d-6b0da83fc4fe.png 732w, https://css-tricks.com/wp-content/uploads/2020/07/85650426-61a90480-b65a-11ea-942d-6b0da83fc4fe-300x255.png 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<p>The cool (and also kind of <em>weird</em>) thing about Emotion is that we can use the <code>as</code> attribute to select which HTML element we’d like to render when we import our component. We can use this attribute to create our <code>&lt;ol&gt;</code> variant without having to make a custom <code>type</code> property or something. And that happens to look just like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;List>This will render a ul.&lt;/List>\n&lt;List as=\"ol\">This will render an ol.&lt;/List></code></pre>\n\n\n\n<p>That’s not just weird to me, right? It’s super neat, however, because it means that we don’t have to do any bizarro logic in the component itself just to change the markup.</p>\n\n\n\n<p>It was at this point that I started to jot down what the perfect API for this component might look like though because then we can work our way back from there. This is what I imagined:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;List>\n  &lt;ListItem>Item 1&lt;/ListItem>\n  &lt;ListItem>Item 2&lt;/ListItem>\n  &lt;ListItem>Item 3&lt;/ListItem>\n&lt;/List>\n\n&lt;List>\n  &lt;ListItem icon={&lt;IconBusiness color=\"orange400\" size=\"sm\" />}>Item 1&lt;/ListItem>\n  &lt;ListItem icon={&lt;IconBusiness color=\"orange400\" size=\"sm\" />}>Item 2&lt;/ListItem>\n  &lt;ListItem icon={&lt;IconBusiness color=\"orange400\" size=\"sm\" />}>Item 3&lt;/ListItem>\n&lt;/List>\n\n&lt;List as=\"ol\">\n  &lt;ListItem>Item 1&lt;/ListItem>\n  &lt;ListItem>Item 2&lt;/ListItem>\n  &lt;ListItem>Item 3&lt;/ListItem>\n&lt;/List></code></pre>\n\n\n\n<p>So after making this sketch I knew we’d need two components, along with the ability to nest icon subcomponents within the <code>&lt;ListItem&gt;</code>. We can start like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React from 'react';\nimport styled from '@emotion/styled';\n\nexport const List = styled('ul')`\n  list-style: none;\n  padding: 0;\n  margin-bottom: 20px;\n\n  ol&amp; {\n    counter-reset: numberedList;\n  }\n`;</code></pre>\n\n\n\n<p>That peculiar <code>ol&amp;</code> syntax is how we tell emotion that these styles only apply to an element when it’s rendered as an <code>&lt;ol&gt;</code>. It’s often a good idea to just add a <code>background: red;</code> to this element to make sure your component is rendering things correctly.</p>\n\n\n\n<p>Next up is our subcomponent, the <code>&lt;ListItem&gt;</code>. It’s important to note that at Sentry we also use TypeScript, so before we define our <code>&lt;ListItem&gt;</code> component, we’ll need to set our props up first:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">type ListItemProps = {\n  icon?: React.ReactNode;\n  children?: string | React.ReactNode;\n  className?: string;\n};</code></pre>\n\n\n\n<p>Now we can add our <code>&lt;IconWrapper&gt;</code> component that will size an <code>&lt;Icon&gt;</code> component within the <code>ListItem</code>. If you remember from the example above, I wanted it to look something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;List>\n  &lt;ListItem icon={&lt;IconBusiness color=\"orange400\" size=\"sm\" />}>Item 1&lt;/ListItem>\n  &lt;ListItem icon={&lt;IconBusiness color=\"orange400\" size=\"sm\" />}>Item 2&lt;/ListItem>\n  &lt;ListItem icon={&lt;IconBusiness color=\"orange400\" size=\"sm\" />}>Item 3&lt;/ListItem>\n&lt;/List></code></pre>\n\n\n\n<p>That <code>IconBusiness</code> component is a preexisting component and we want to wrap it in a span so that we can style it. Thankfully, we’ll need just a tiny bit of CSS to align the icon properly with the text and the <code>&lt;IconWrapper&gt;</code> can handle all of that for us:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">type ListItemProps = {\n  icon?: React.ReactNode;\n  children?: string | React.ReactNode;\n  className?: string;\n};\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin-right: 15px;\n  height: 16px;\n  align-items: center;\n`;</code></pre>\n\n\n\n<p>Once we’ve done this we can finally add our <code>&lt;ListItem&gt;</code> component beneath these two, although it is considerably more complex. We’ll need to add the props, then we can render the <code>&lt;IconWrapper&gt;</code> above when the <code>icon</code> prop exists, and render the icon component that’s passed into it as well. I’ve also added all the styles below so you can see how I’m styling each of these variants:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export const ListItem = styled(({icon, className, children}: ListItemProps) => (\n  &lt;li className={className}>\n    {icon &amp;&amp; (\n      &lt;IconWrapper>\n        {icon}\n      &lt;/IconWrapper>\n    )}\n    {children}\n  &lt;/li>\n))&lt;ListItemProps>`\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding-left: 34px;\n  margin-bottom: 20px;\n\t\n  /* Tiny circle and icon positioning */\n  &amp;:before,\n\t&amp; > ${IconWrapper} {\n    position: absolute;\n    left: 0;\n  }\n\n  ul &amp; {\n    color: #aaa;\n    /* This pseudo is the tiny circle for ul items */ \n    &amp;:before {\n      content: '';\n      width: 6px;\n      height: 6px;\n      border-radius: 50%;\n      margin-right: 15px;\n      border: 1px solid #aaa;\n      background-color: transparent;\n      left: 5px;\n      top: 10px;\n    }\n\t\t\n    /* Icon styles */\n    ${p =>\n      p.icon &amp;&amp;\n      `\n      span {\n        top: 4px;\n      }\n      /* Removes tiny circle pseudo if icon is present */\n      &amp;:before {\n        content: none;\n      }\n    `}\n  }\n  /* When the list is rendered as an &lt;ol> */\n  ol &amp; {\n    &amp;:before {\n      counter-increment: numberedList;\n      content: counter(numberedList);\n      top: 3px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      width: 18px;\n      height: 18px;\n      font-size: 10px;\n      font-weight: 600;\n      border: 1px solid #aaa;\n      border-radius: 50%;\n      background-color: transparent;\n      margin-right: 20px;\n    }\n  }\n`;</code></pre>\n\n\n\n<p>And there you have it! A relatively simple <code>&lt;List&gt;</code> component built with Emotion. Although, after going through this exercise I’m still not sure that I like the syntax. I reckon it sort of makes the simple stuff <em>really</em> simple but the medium-sized components <em>much</em> more complicated than they should be. Plus, it could be pretty darn confusing to a newcomer and that worries me a bit.</p>\n\n\n\n<p>But everything is a learning experience, I guess. Either way, I’m glad I had the opportunity to work on this tiny component because it taught me a few good things about TypeScript, React, and trying to make our styles somewhat readable.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-make-a-list-component-with-emotion/\">How to Make a List Component with Emotion</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Robin Rendle",
      "comments": "https://css-tricks.com/how-to-make-a-list-component-with-emotion/#respond",
      "content": "<p>I’ve been doing a bit of refactoring this week at <a href=\"https://sentry.io/welcome/\">Sentry</a> and I noticed that we didn’t have a generic List component that we could use across projects and features. So, I started one, but here’s the rub: we style things at Sentry using <a href=\"https://emotion.sh/docs/introduction\">Emotion</a>, which I have only passing experience with and is described in the docs as…</p>\n<blockquote class=\"wp-block-quote\">\n<p>[…] a library designed for writing css styles with JavaScript. It provides powerful and predictable style composition in addition to </p>\n</blockquote>\n<p>&#8230; <a href=\"https://css-tricks.com/how-to-make-a-list-component-with-emotion/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;How to Make a List Component with Emotion&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-make-a-list-component-with-emotion/\">How to Make a List Component with Emotion</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "I’ve been doing a bit of refactoring this week at Sentry and I noticed that we didn’t have a generic List component that we could use across projects and features. So, I started one, but here’s the rub: we style things at Sentry using Emotion, which I have only passing experience with and is described in the docs as…\n\n[…] a library designed for writing css styles with JavaScript. It provides powerful and predictable style composition in addition to \n\n… Read article  “How to Make a List Component with Emotion”\nThe post How to Make a List Component with Emotion appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316298",
      "categories": [
        "Article",
        "components",
        "emotion",
        "lists"
      ],
      "isoDate": "2020-07-08T14:46:38.000Z"
    },
    {
      "creator": "Chris Coyier",
      "title": "How to delete all node_modules directories from your computer",
      "link": "https://gomakethings.com/how-to-delete-all-node_modules-directories-from-your-computer/",
      "pubDate": "Wed, 08 Jul 2020 14:46:25 +0000",
      "content:encoded": "\n<p>Nice <a href=\"https://gomakethings.com/how-to-delete-all-node_modules-directories-from-your-computer/\">tip</a> from Chris Ferdinandi:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>My&nbsp;<code>node_modules</code>&nbsp;directories contained 50mb of stuff on the small side, and over 200mb of files in some cases. Over a few dozen projects, that really adds up!</p></blockquote>\n\n\n\n<p>Two dozen projects with 200 MB worth of <code>node_modules</code>? That&#8217;s nearly 5 GB of space for a bunch of stuff you&#8217;ve probably forgotten is even there, isn&#8217;t doing anything, and if you need again is a single command away. I feel like there should almost be a reaper app for these folders, deleting them if they haven&#8217;t been touched in a few weeks.</p>\n\n\n\n<span id=\"more-316406\"></span>\n\n\n\n<p>Nuke &#8217;em:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"># Mac/Linux\nfind . -name \"node_modules\" -type d -prune -print | xargs du -chs\n\n# Windows\nFOR /d /r . %d in (node_modules) DO @IF EXIST \"%d\" echo %d\"</code></pre>\n\n\n\n<p></p>\n<p><a href=\"https://gomakethings.com/how-to-delete-all-node_modules-directories-from-your-computer/\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/how-to-delete-all-node_modules-directories-from-your-computer/\">Permalink</a></p><p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-delete-all-node_modules-directories-from-your-computer/\">How to delete all node_modules directories from your computer</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Chris Coyier",
      "content": "<p>Nice <a href=\"https://gomakethings.com/how-to-delete-all-node_modules-directories-from-your-computer/\">tip</a> from Chris Ferdinandi:</p>\n<blockquote class=\"wp-block-quote\">\n<p>My&#160;<code>node_modules</code>&#160;directories contained 50mb of stuff on the small side, and over 200mb of files in some cases. Over a few dozen projects, that really adds up!</p>\n</blockquote>\n<p>Two dozen projects with 200 MB worth of <code>node_modules</code>? That&#8217;s nearly 5 GB of space for a bunch of stuff you&#8217;ve probably forgotten is even there, isn&#8217;t doing anything, and if you need again is a single command away. I feel like there should almost be &#8230; <a href=\"https://css-tricks.com/how-to-delete-all-node_modules-directories-from-your-computer/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;How to delete all node_modules directories from your computer&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-delete-all-node_modules-directories-from-your-computer/\">How to delete all node_modules directories from your computer</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "Nice tip from Chris Ferdinandi:\n\nMy node_modules directories contained 50mb of stuff on the small side, and over 200mb of files in some cases. Over a few dozen projects, that really adds up!\n\nTwo dozen projects with 200 MB worth of node_modules? That’s nearly 5 GB of space for a bunch of stuff you’ve probably forgotten is even there, isn’t doing anything, and if you need again is a single command away. I feel like there should almost be … Read article  “How to delete all node_modules directories from your computer”\nThe post How to delete all node_modules directories from your computer appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316406",
      "categories": [
        "Link",
        "maintenance",
        "node"
      ],
      "isoDate": "2020-07-08T14:46:25.000Z"
    },
    {
      "creator": "Chris Coyier",
      "title": "Displaying the Current Step with CSS Counters",
      "link": "https://css-tricks.com/displaying-the-current-step-with-css-counters/",
      "pubDate": "Tue, 07 Jul 2020 22:33:36 +0000",
      "content:encoded": "\n<p>Say you have five buttons. Each button is a step. If you click on the fourth button, you&#8217;re on step 4 of 5, and you want to display that. </p>\n\n\n\n<p>This kind of counting and displaying could be hard-coded, but that&#8217;s no fun. JavaScript could do this job as well. But CSS? <em>Hmmmm.</em> Can it? CSS <a href=\"https://css-tricks.com/almanac/properties/c/counter-increment/\">has counters</a>, so we can certainly count the number of buttons. But how do we calculate only up to a certain button? Turns out it can be done.</p>\n\n\n\n<span id=\"more-313891\"></span>\n\n\n\n<p class=\"explanation\">Thanks to Jan Enning for emailing in about this trick, it&#8217;s very clever!</p>\n\n\n\n<h3>HTML</h3>\n\n\n\n<p>It doesn&#8217;t <em>have</em> to be buttons; it just needs to be some <em>sibling</em> elements we can count. But we&#8217;ll go ahead and use buttons here:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"steps\">\n\n  &lt;button class=\"active\">Shop&lt;/button>\n  &lt;button>Cart&lt;/button>\n  &lt;button>Shipping&lt;/button>\n  &lt;button>Checkout&lt;/button>\n  &lt;button>Thank You&lt;/button>\n\n  &lt;div class=\"message\">&lt;/div>\n\n&lt;/div></code></pre>\n\n\n\n<p>The empty <code>.message</code> div there will be where we output our step messaging with CSS content.</p>\n\n\n\n<h3>CSS</h3>\n\n\n\n<p>The trick is that we&#8217;re actually going to use <em>three</em> counters:</p>\n\n\n\n<ol><li>A total count of all the buttons</li><li>A count of the current step</li><li>A count of how many remaining steps are after the current step</li></ol>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.steps {\n  counter-reset: \n    currentStep 0 \n    remainder 0 \n    totalStep 0;\n}</code></pre>\n\n\n\n<p>Now let&#8217;s actually do the counting. To count all buttons is straightforward:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">button {\n  counter-increment: totalStep;\n}</code></pre>\n\n\n\n<p>Next, we need another thing to count that will also count the buttons. We can use a pseudo-element that&#8217;s only purpose is to count buttons:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">button::before {\n  content: \"\";\n  counter-increment: currentStep;\n}</code></pre>\n\n\n\n<p>The trick is to <strong>stop counting</strong> that pseudo-element on all the elements <em>after</em> the active element. If we&#8217;re using an <code>.active</code> class that looks like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">button.active ~ button::before {\n  /* prevents currentStep from being incremented! */\n  counter-increment: remainder;\n}</code></pre>\n\n\n\n<p>We&#8217;re counting the <code>remainder</code> there, which might also be useful, but because we&#8217;re <em>only</em> incrementing the remainder, that means we&#8217;re <em>not</em> counting the <code>currentStep</code> counter. Fancy, fancy. </p>\n\n\n\n<p>Then we can use the counters to output our messaging:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">message::before {\n  content: \"Step: \" counter(currentStep) \" / \" counter(totalStep);\n}</code></pre>\n\n\n\n<p>Here it is!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWydxqP\" src=\"//codepen.io/anon/embed/QWydxqP?height=450&amp;theme-id=1&amp;slug-hash=QWydxqP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWydxqP\" title=\"CodePen Embed QWydxqP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>There is a little JavaScript there so you can play with moving the active state on the button, but the counting and messaging is all CSS.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/displaying-the-current-step-with-css-counters/\">Displaying the Current Step with CSS Counters</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Chris Coyier",
      "comments": "https://css-tricks.com/displaying-the-current-step-with-css-counters/#comments",
      "content": "<p>Say you have five buttons. Each button is a step. If you click on the fourth button, you&#8217;re on step 4 of 5, and you want to display that. </p>\n<p>This kind of counting and displaying could be hard-coded, but that&#8217;s no fun. JavaScript could do this job as well. But CSS? <em>Hmmmm.</em> Can it? CSS <a href=\"https://css-tricks.com/almanac/properties/c/counter-increment/\">has counters</a>, so we can certainly count the number of buttons. But how do we calculate only up to a certain button? Turns out &#8230; <a href=\"https://css-tricks.com/displaying-the-current-step-with-css-counters/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;Displaying the Current Step with CSS Counters&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/displaying-the-current-step-with-css-counters/\">Displaying the Current Step with CSS Counters</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "Say you have five buttons. Each button is a step. If you click on the fourth button, you’re on step 4 of 5, and you want to display that. \nThis kind of counting and displaying could be hard-coded, but that’s no fun. JavaScript could do this job as well. But CSS? Hmmmm. Can it? CSS has counters, so we can certainly count the number of buttons. But how do we calculate only up to a certain button? Turns out … Read article  “Displaying the Current Step with CSS Counters”\nThe post Displaying the Current Step with CSS Counters appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=313891",
      "categories": [
        "Article",
        "counter-increment",
        "counters"
      ],
      "isoDate": "2020-07-07T22:33:36.000Z"
    },
    {
      "creator": "Chris Coyier",
      "title": "WooCommerce on CSS-Tricks",
      "link": "https://css-tricks.com/woocommerce-on-css-tricks/",
      "pubDate": "Tue, 07 Jul 2020 14:44:31 +0000",
      "content:encoded": "\n<p>I always get all excited when I accomplish something, but I get <em>extra</em> excited when I get it done and think, <em>&#8220;well, that was easy.&#8221;</em> As much as I enjoy fiddling with technology, I enjoy reaping the benefit of well set-up technology even more. That&#8217;s why I still get so excited about WordPress — I feel so powerful being able to accomplish big things <em>without</em> a huge amount of time and effort.</p>\n\n\n\n<p>I had that exact feeling this past month when I was getting <a href=\"https://woocommerce.com/?aff=8638\">WooCommerce</a> set up here on CSS-Tricks (again).</p>\n\n\n\n<span id=\"more-316371\"></span>\n\n\n\n<p>Lemme show you how I&#8217;ve got it set up, because I bet there are plenty of you who could do the same thing and make even more use of this setup than what I&#8217;m doing!</p>\n\n\n\n<h3>WooCommerce Powered Membership</h3>\n\n\n\n<p>Let&#8217;s say you want to have a membership site. Perhaps you have a fitness website and you make training videos and you build a membership paywall for pages that display those videos and training regiments. Or perhaps you have a cooking website, and paid members have access to additional features, like saved shopping lists.</p>\n\n\n\n<p>Having a system for paid members is a foundational concept for making money online, and is typically no small task. Fortunately, WooCommerce makes quick work of it. Aside from the (free) WooCommerce plugin, you&#8217;ll need the ($199) <a href=\"https://woocommerce.com/products/woocommerce-memberships/\">WooCommerce Memberships</a> plugin.</p>\n\n\n\n<p class=\"explanation\">If you&#8217;re eying up some paid plugins for WooCommerce, you might circle <strong>July 21st</strong> on your calendar. That&#8217;s <strong>WooCommerce Day</strong> and there are going to be some big sales.</p>\n\n\n\n<p>Once you have that installed, you&#8217;ll see a <strong>Memberships</strong> tab within your WooCommerce area in the WordPress admin. In there is a <strong>Membership Plans</strong> area where you can set up your plans. We have a very simple one-plan setup: <strong>CSS-Tricks Member</strong>. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.39.16-PM.png?fit=1024%2C690&amp;ssl=1\" alt=\"\" class=\"wp-image-316389\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.39.16-PM.png 1170w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.39.16-PM-300x202.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.39.16-PM-1024x690.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.39.16-PM-768x517.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.39.16-PM-1000x674.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<p>You could have a whole variety of plans if you like (e.g. bronze, silver, gold). </p>\n\n\n\n<p>These plans don&#8217;t do anything all by themselves just yet —they are just user roles, and the access control stuff comes later. You could make these plans such that only admins can add people to them, that anybody can register for them for free, or that they require the purchase of a product to join. That last one is the useful one for an eCommerce setup!</p>\n\n\n\n<p>As a side note, you&#8217;ll probably want to limit the time length of the membership. You <em>could</em> make it unlimited, but it&#8217;s probably smarter to start with memberships that expire after a set time so you aren&#8217;t promising things for life.</p>\n\n\n\n<p>Since I&#8217;m selling memberships, I&#8217;ve tied the Membership Plan to the sale of a product: <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.45.09-PM.png?fit=1024%2C919&amp;ssl=1\" alt=\"\" class=\"wp-image-316391\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.45.09-PM.png 1301w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.45.09-PM-300x269.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.45.09-PM-1024x919.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.45.09-PM-768x689.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-1.45.09-PM-1000x897.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /><figcaption>Buy this product, activate subscription, activate membership</figcaption></figure>\n\n\n\n<p>The way to get access to that membership plan is to purchase this product. You&#8217;ll also always be able to manually add people to plans as an admin.</p>\n\n\n\n<p>This product could have been a one-off charge, which supports the idea of an unlimited length membership, but like most memberships in the world, I wanted to set it up as a recurring billing product. That means we need a little additional setup.</p>\n\n\n\n<h3>Subscriptions to Memberships</h3>\n\n\n\n<p>I found this a tiny bit confusing. You might assume a membership plugin would support the idea of recurring billing for that membership, but it doesn&#8217;t do that out of the box. We need a second plugin for that: <a href=\"https://woocommerce.com/products/woocommerce-subscriptions/\">WooCommerce Subscriptions</a>. </p>\n\n\n\n<p>The subscription plugin is another $199, making this setup just shy of $400. That&#8217;s it for upfront costs though — you only need to renew the licenses next year if you need support and updates (I would). I find that cost to be more than fair for a system that works this efficiently, but you&#8217;ll have to do the business math for yourself. </p>\n\n\n\n<p>Once you have that plugin installed, any product you create has the possibility of being a subscription product.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.01.24-PM.png\" alt=\"\" class=\"wp-image-316394\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.01.24-PM.png 827w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.01.24-PM-300x124.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.01.24-PM-768x317.png 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<p>Here at CSS-Tricks, we&#8217;re charging $20/year for the membership. When someone signs up, they&#8217;ll be re-charged the next year at $20. <strong>That matches the length of the membership plan, which is an important step.</strong> Nothing forces you to do that but it would be weird to place a charge on a different date from the actual renewal. </p>\n\n\n\n<h3>Membership-Only Access to Posts</h3>\n\n\n\n<p>Wwe&#8217;ve done the two biggest parts of setup:</p>\n\n\n\n<ol><li>Created a Membership Plan</li><li>Created a product people can buy that subscribes them to that plan</li></ol>\n\n\n\n<p>Now for the part that actually gives the members some benefit! I am planning to sell access to a &#8220;book&#8221; that&#8217;s hosted on this site. <a href=\"https://css-tricks.com/books/greatest-css-tricks/\">The book</a> is actually just a collection of posts. They are Custom Post Types we&#8217;ve set up called &#8220;Chapters.&#8221; In the editor for the chapter, below the content, there will be a Memberships area you can use for locking the chapter to a Membership Plan.:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.13.57-PM.png\" alt=\"\" class=\"wp-image-316395\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.13.57-PM.png 801w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.13.57-PM-300x191.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.13.57-PM-768x489.png 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" /><figcaption>This is in the post editor, underneath the post content.</figcaption></figure>\n\n\n\n<p>Again, this example uses a Custom Post Type, but it could be any page or post type at all! It&#8217;s literally the flip of a switch to put something behind the membership wall.</p>\n\n\n\n<p>There are two &#8220;faces&#8221; of a post with a content restriction:</p>\n\n\n\n<ol><li><strong>What members see</strong>: the content</li><li><strong>What non-members see</strong>: an excerpt and message on how to unlock the content</li></ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.21.53-PM.png?fit=1024%2C948&amp;ssl=1\" alt=\"\" class=\"wp-image-316396\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.21.53-PM.png 1144w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.21.53-PM-300x278.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.21.53-PM-1024x948.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.21.53-PM-768x711.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-05-at-2.21.53-PM-1000x926.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<p>I think that&#8217;s a nice system. It shows people exactly what they <em>could</em> be reading if they were a member and shows them exactly how they can become a member. </p>\n\n\n\n<p>Now there is some custom CSS happening here, but not much! I just use the default features, see what gets output onto the page, and there is always a sensible class name to hook onto to do styling — just how it should work. </p>\n\n\n\n<h3>Doing Things Programmatically for Members</h3>\n\n\n\n<p>In our case, the primary benefit to being a member is probably gaining access to <a href=\"https://css-tricks.com/books/greatest-css-tricks/\">the book</a>, but it doesn&#8217;t have to stop there. I think giving as much as possible to a paying member is generally a good idea. And since advertising is the primary business model on this site, it seems fair to remove those ads if you have a paid supporter membership.</p>\n\n\n\n<p>There are all kinds of APIs for these plugins to hook into whatever you need, but I like to keep things as simple as I can. For example, in any template, I can check to see if you&#8217;re a member or not.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php if ( !wc_memberships_is_user_active_member() ) { ?>\n  &lt;div>\n     &lt;!-- Show an ad if you're not a member. -->\n  &lt;/div>\n&lt;?php } ?></code></pre>\n\n\n\n<p>I also do this before I run any other of the site&#8217;s JavaScript, so I can know in the JavaScript if a user is a member or not.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php if ( wc_memberships_is_user_active_member() ) { ?>\n    &lt;script>\n      window.activeMember = true;\n    &lt;/script>\n&lt;?php } ?></code></pre>\n\n\n\n<p>Some of the ads on this site are JavaScript-powered, so I can wrap the call for them in a <code>!window.activeMember</code> logic to not request them at all.</p>\n\n\n\n<h3>On-Demand Printing &amp; Fulfillment</h3>\n\n\n\n<p>Memberships and subscriptions are just two of the things I&#8217;m doing with WooCommerce. The other is selling physical products, which is something I&#8217;ve dabbled in over the years. In fact, we used to hand-fulfill each and every order by taking products to the post office! We&#8217;ve also partnered with fulfillment companies in the past, but we still had to physically print up a bunch of inventory ahead of time. </p>\n\n\n\n<p>Things have come a long way since then and there are lots of companies that print on demand! One such company (and I have no affiliation with them) is <a href=\"https://printify.com/app/print-providers\">Printify</a>. They sell all kinds of stuff, including what you&#8217;d expect from a printing company: t-shirts, hoodies, mugs&#8230; and the best part for me is that it <a href=\"https://printify.com/woocommerce/\">connects directly</a> to WooCommerce. </p>\n\n\n\n<p>So far, <a href=\"https://css-tricks.com/posters-for-css-flexbox-and-css-grid/\">we&#8217;ve stocked the store with posters</a>! On the Printify side, I pick the product, upload the art, choose some options, and that&#8217;s that!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.14.30-PM.png\" alt=\"\" class=\"wp-image-316563\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.14.30-PM.png 2350w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.14.30-PM-300x201.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.14.30-PM-1024x688.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.14.30-PM-768x516.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.14.30-PM-1536x1031.png 1536w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.14.30-PM-2048x1375.png 2048w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.14.30-PM-1000x671.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<p>The last step in the process is to <strong>&#8220;Publish product to your WooCommerce store&#8221;</strong> which has worked perfectly for me so far. I trust that it works, as it must be forming the connection between Printify and WooCommerce such that Printify receives the order and fulfills it when they come in.</p>\n\n\n\n<p>From there, the products appear on my site and I can edit or customize them from WordPress if I need to (like the copy and such):</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.16.21-PM.png?fit=1024%2C505&amp;ssl=1\" alt=\"\" class=\"wp-image-316564\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.16.21-PM.png 1322w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.16.21-PM-300x148.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.16.21-PM-1024x505.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.16.21-PM-768x379.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-06-at-3.16.21-PM-1000x493.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /><figcaption>Products in my WooCommerce admin</figcaption></figure>\n\n\n\n<p>I can check orders at any time and watch as they are ordered, produced, prepped, and shipped:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/orders.png?fit=1024%2C417&amp;ssl=1\" alt=\"\" class=\"wp-image-316565\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/orders.png 1904w, https://css-tricks.com/wp-content/uploads/2020/07/orders-300x122.png 300w, https://css-tricks.com/wp-content/uploads/2020/07/orders-1024x417.png 1024w, https://css-tricks.com/wp-content/uploads/2020/07/orders-768x313.png 768w, https://css-tricks.com/wp-content/uploads/2020/07/orders-1536x626.png 1536w, https://css-tricks.com/wp-content/uploads/2020/07/orders-1000x408.png 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /><figcaption>Order dashboard on Printify</figcaption></figure>\n\n\n\n<p>I ordered some posters myself, of course, so I could try it out before putting it in front of other people. The poster came in a nice triangular tube thing in perfect condition on thick bright white paper. I hung it right up next to my office computer:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://css-tricks.com/wp-content/uploads/2020/07/IMG_3787-768x1024.jpeg\" alt=\"\" class=\"wp-image-316456\" srcset=\"https://css-tricks.com/wp-content/uploads/2020/07/IMG_3787-768x1024.jpeg 768w, https://css-tricks.com/wp-content/uploads/2020/07/IMG_3787-225x300.jpeg 225w, https://css-tricks.com/wp-content/uploads/2020/07/IMG_3787-1152x1536.jpeg 1152w, https://css-tricks.com/wp-content/uploads/2020/07/IMG_3787-1536x2048.jpeg 1536w, https://css-tricks.com/wp-content/uploads/2020/07/IMG_3787-1000x1333.jpeg 1000w, https://css-tricks.com/wp-content/uploads/2020/07/IMG_3787-scaled.jpeg 1920w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Mobile App</h3>\n\n\n\n<p>If you&#8217;re like me and get excited to look at how your little store is doing and get notifications for sales, there is <a href=\"https://woocommerce.com/mobile/\">a mobile app</a>.</p>\n\n\n\n<div class=\"wp-block-jetpack-tiled-gallery aligncenter is-style-rectangular\"><div class=\"tiled-gallery__gallery\"><div class=\"tiled-gallery__row\"><div class=\"tiled-gallery__col\"><figure class=\"tiled-gallery__item\"><img srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3793.png?strip=info&#038;w=600&#038;ssl=1 600w,https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3793.png?strip=info&#038;w=900&#038;ssl=1 900w,https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3793.png?strip=info&#038;w=1200&#038;ssl=1 1200w,https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3793.png?strip=info&#038;w=1500&#038;ssl=1 1500w,https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3793.png?strip=info&#038;w=1800&#038;ssl=1 1800w,https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3793.png?strip=info&#038;w=2000&#038;ssl=1 2000w\" alt=\"\" data-height=\"2436\" style=\"height: 2436px; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1rem 0; padding: 1rem; overflow: auto;\" data-id=\"316641\" data-link=\"https://css-tricks.com/?attachment_id=316641\" data-url=\"https://css-tricks.com/wp-content/uploads/2020/07/IMG_3793.png\" data-width=\"1125\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3793.png?ssl=1\"/></figure></div><div class=\"tiled-gallery__col\"><figure class=\"tiled-gallery__item\"><img srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3794.png?strip=info&#038;w=600&#038;ssl=1 600w,https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3794.png?strip=info&#038;w=900&#038;ssl=1 900w,https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3794.png?strip=info&#038;w=1200&#038;ssl=1 1200w,https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3794.png?strip=info&#038;w=1500&#038;ssl=1 1500w,https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3794.png?strip=info&#038;w=1800&#038;ssl=1 1800w,https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3794.png?strip=info&#038;w=2000&#038;ssl=1 2000w\" alt=\"\" data-height=\"2436\" style=\"height: 2436px; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1rem 0; padding: 1rem; overflow: auto;\" data-id=\"316642\" data-link=\"https://css-tricks.com/?attachment_id=316642\" data-url=\"https://css-tricks.com/wp-content/uploads/2020/07/IMG_3794.png\" data-width=\"1125\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/07/IMG_3794.png?ssl=1\"/></figure></div></div></div></div>\n\n\n\n<p>I haven&#8217;t had the need to update order statuses or manage reviews and the like, but that&#8217;s all in there too.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>There is a lot of technology at work here! </p>\n\n\n\n<p>But my actual time commitment has been minimal. I&#8217;ve spent longer writing this blog post than I have setting up <em>all</em> of this eCommerce stuff. I&#8217;m just an integrator here. I&#8217;m not inventing anything — just taking advantage of some best-in-class software to make my ideas happen.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/woocommerce-on-css-tricks/\">WooCommerce on CSS-Tricks</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Chris Coyier",
      "comments": "https://css-tricks.com/woocommerce-on-css-tricks/#comments",
      "content": "<p>I always get all excited when I accomplish something, but I get <em>extra</em> excited when I get it done and think, <em>&#8220;well, that was easy.&#8221;</em> As much as I enjoy fiddling with technology, I enjoy reaping the benefit of well set-up technology even more. That&#8217;s why I still get so excited about WordPress — I feel so powerful being able to accomplish big things <em>without</em> a huge amount of time and effort.</p>\n<p>I had that exact feeling this past month &#8230; <a href=\"https://css-tricks.com/woocommerce-on-css-tricks/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;WooCommerce on CSS-Tricks&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/woocommerce-on-css-tricks/\">WooCommerce on CSS-Tricks</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "I always get all excited when I accomplish something, but I get extra excited when I get it done and think, “well, that was easy.” As much as I enjoy fiddling with technology, I enjoy reaping the benefit of well set-up technology even more. That’s why I still get so excited about WordPress — I feel so powerful being able to accomplish big things without a huge amount of time and effort.\nI had that exact feeling this past month … Read article  “WooCommerce on CSS-Tricks”\nThe post WooCommerce on CSS-Tricks appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316371",
      "categories": [
        "Article",
        "woocommerce"
      ],
      "isoDate": "2020-07-07T14:44:31.000Z"
    },
    {
      "creator": "Chris Coyier",
      "title": "Improving Chromium’s browser compatibility in 2020",
      "link": "https://blog.chromium.org/2020/06/improving-chromiums-browser.html",
      "pubDate": "Tue, 07 Jul 2020 14:44:19 +0000",
      "content:encoded": "\n<p>This is exactly what I <a href=\"https://blog.chromium.org/2020/06/improving-chromiums-browser.html\">love to hear</a> from any browser vendor:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>When it comes to browser compatibility, there are still too many missing features and edge-case bugs. But it doesn&#8217;t have to be this way. Things can and will get better, if browser vendors can understand what is causing the most pain, and take action to address the causes. In Chrome we&#8217;re doing our best to listen, and we&#8217;re doing our best to address what we&#8217;re hearing. We hope it helps, and we&#8217;re looking forward to a more compatible 2021.</p></blockquote>\n\n\n\n<p>I love the nod to that super clever <a href=\"https://css-tricks.com/the-div-that-looks-different-in-every-browser/\">div that looks different in every browser</a>. This is a solid list from Stephen McGruer. My favorite:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Like Flexbox, <a href=\"https://web.dev/responsive-web-design-basics/#grid\">CSS Grid</a> is an important component of modern layout. Looking at the early survey results it seems like the story for CSS Grid support in Chromium is fairly good (we have our friends from <a href=\"https://www.igalia.com/\">Igalia</a> to thank for that!). There is one clear exception &#8211; Chromium still doesn&#8217;t support <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid\">subgrid</a>.</p><p>Hopefully, it won&#8217;t be an exception for much longer. It&#8217;s still early days, but I&#8217;m excited to share that a team at Microsoft Edge are working on rearchitecting Chromium&#8217;s Grid support to use the new LayoutNG engine &#8211; and as part of this are intending to add subgrid support!</p></blockquote>\n\n\n\n<p>Not that anyone should relax, but I think <em>right now</em> is probably the best level of browser compatibility we&#8217;ve ever seen. </p>\n<p><a href=\"https://blog.chromium.org/2020/06/improving-chromiums-browser.html\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/improving-chromiums-browser-compatibility-in-2020/\">Permalink</a></p><p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/improving-chromiums-browser-compatibility-in-2020/\">Improving Chromium&#8217;s browser compatibility in 2020</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Chris Coyier",
      "content": "<p>This is exactly what I <a href=\"https://blog.chromium.org/2020/06/improving-chromiums-browser.html\">love to hear</a> from any browser vendor:</p>\n<blockquote class=\"wp-block-quote\">\n<p>When it comes to browser compatibility, there are still too many missing features and edge-case bugs. But it doesn&#8217;t have to be this way. Things can and will get better, if browser vendors can understand what is causing the most pain, and take action to address the causes. In Chrome we&#8217;re doing our best to listen, and we&#8217;re doing our best to address what we&#8217;re hearing. We hope </p>\n</blockquote>\n<p>&#8230; <a href=\"https://css-tricks.com/improving-chromiums-browser-compatibility-in-2020/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;Improving Chromium&#8217;s browser compatibility in 2020&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/improving-chromiums-browser-compatibility-in-2020/\">Improving Chromium&#8217;s browser compatibility in 2020</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "This is exactly what I love to hear from any browser vendor:\n\nWhen it comes to browser compatibility, there are still too many missing features and edge-case bugs. But it doesn’t have to be this way. Things can and will get better, if browser vendors can understand what is causing the most pain, and take action to address the causes. In Chrome we’re doing our best to listen, and we’re doing our best to address what we’re hearing. We hope \n\n… Read article  “Improving Chromium’s browser compatibility in 2020”\nThe post Improving Chromium’s browser compatibility in 2020 appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316421",
      "categories": [
        "Link",
        "browser",
        "chrome",
        "cross-browser"
      ],
      "isoDate": "2020-07-07T14:44:19.000Z"
    },
    {
      "creator": "Chris Coyier",
      "title": "Bootstrap 5",
      "link": "https://blog.getbootstrap.com/2020/06/16/bootstrap-5-alpha/",
      "pubDate": "Mon, 06 Jul 2020 22:49:56 +0000",
      "content:encoded": "\n<p>It&#8217;s always notable when the world biggest CSS framework <a href=\"https://blog.getbootstrap.com/2020/06/16/bootstrap-5-alpha/\">goes up a major version</a> (it&#8217;s in alpha now). </p>\n\n\n\n<p>It has dropped jQuery and IE, started using some CSS custom properties, gone fully customized with form elements, started to embrace utility classes, and includes a massive icon set you can <a href=\"https://blog.getbootstrap.com/2020/06/26/bootstrap-icons-alpha5/\">use via SVG sprite</a>. Sweet.</p>\n<p><a href=\"https://blog.getbootstrap.com/2020/06/16/bootstrap-5-alpha/\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/bootstrap-5/\">Permalink</a></p><p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/bootstrap-5/\">Bootstrap 5</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "dc:creator": "Chris Coyier",
      "comments": "https://css-tricks.com/bootstrap-5/#comments",
      "content": "<p>It&#8217;s always notable when the world biggest CSS framework <a href=\"https://blog.getbootstrap.com/2020/06/16/bootstrap-5-alpha/\">goes up a major version</a> (it&#8217;s in alpha now). </p>\n<p>It has dropped jQuery and IE, started using some CSS custom properties, gone fully customized with form elements, started to embrace utility classes, and includes a massive icon set you can <a href=\"https://blog.getbootstrap.com/2020/06/26/bootstrap-icons-alpha5/\">use via SVG sprite</a>. Sweet.</p>\n<p><a href=\"https://blog.getbootstrap.com/2020/06/16/bootstrap-5-alpha/\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/bootstrap-5/\">Permalink</a>&#8230; <a href=\"https://css-tricks.com/bootstrap-5/\" class=\"read-more\">Read article <span class=\"screen-reader-text\"> &#8220;Bootstrap 5&#8221;</span></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/bootstrap-5/\">Bootstrap 5</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n",
      "contentSnippet": "It’s always notable when the world biggest CSS framework goes up a major version (it’s in alpha now). \nIt has dropped jQuery and IE, started using some CSS custom properties, gone fully customized with form elements, started to embrace utility classes, and includes a massive icon set you can use via SVG sprite. Sweet.\nDirect Link to Article — Permalink… Read article  “Bootstrap 5”\nThe post Bootstrap 5 appeared first on CSS-Tricks.",
      "guid": "https://css-tricks.com/?p=316400",
      "categories": [
        "Link",
        "bootstrap"
      ],
      "isoDate": "2020-07-06T22:49:56.000Z"
    }
  ],
  "title": "CSS-Tricks",
  "description": "Tips, Tricks, and Techniques on using Cascading Style Sheets.",
  "generator": "https://wordpress.org/?v=5.4.2",
  "link": "https://css-tricks.com",
  "language": "en-US",
  "lastBuildDate": "Thu, 09 Jul 2020 18:54:53 +0000"
}